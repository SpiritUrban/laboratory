- header: "String Methods"
  portions:
    - text:
        - |
          substring(). slice(). substr().
        - |
          There are 3 methods for extracting a part of a string:
      example: |
        slice(start, end);
        substring(start, end);
        substr(start, length);

- header: "slice()"
  portions:
    - text:
        - |
          slice() extracts a part of a string 
          and returns the extracted part 
          in a new string.
        - |
          The method takes 2 parameters: 
          start position, 
          and end position 
          (end not included).
      example: |
        let text = "Apple, Banana, Kiwi";
        let part = text.slice(7, 13);
        // part -> "Banana"
    - text:
        - |
          Slice out a portion of a string from position 7 
          to position 13
        - |
          If you omit the second parameter, 
          the method will slice out the rest of the string:
      example: |
        let text = "Apple, Banana, Kiwi";
        let part = text.slice(7);
        // part -> "Banana, Kiwi"
    - text:
        - |
          If a parameter is negative, 
          the position is counted from the end of the string
      example: |
        let text = "Apple, Banana, Kiwi";
        let part = text.slice(-12);
        // part -> "Banana, Kiwi"
    - text:
        - |
          This example slices out a portion of a string 
          from position -12 to position -6
      example: |
        let text = "Apple, Banana, Kiwi";
        let part = text.slice(-12, -6);
        // part -> "Banana"

- header: "substring()"
  portions:
    - text:
        - substring() is similar to slice()
        - |
          The difference is that 
          start and end values less than 0 are treated as 0 
          in substring()
      example: |
        let str = "Apple, Banana, Kiwi";
        let part = str.substring(7, 13);
    - text:
        - He's purely positive!
        - |
          If you omit the second parameter, 
          substring() will slice out the rest of the string

- header: "substr()"
  portions:
    - text:
        - substr() is similar to slice().
        - |
          The difference is that the second parameter ...
          specifies the length of the extracted part.
      example: |
        let str = "Apple, Banana, Kiwi";
        let part = str.substr(7, 6);
        // part -> 'Banana'
    - text:
        - |
          If you omit the second parameter, 
          substr() will slice out the rest of the string.
        - |
          If the first parameter is negative, 
          the position counts from the end of the string.
      example: |
        let str = "Apple, Banana, Kiwi";
        let part = str.substr(7);
        // part -> 'Banana, Kiwi'

- header: "Replacing String Content"
  portions:
    - text:
        - | 
          The replace() method replaces 
          a specified value with another value 
          in a string
      example: |
        let text = "Please visit Microsoft!";
        let newText = text.replace("Microsoft", "W3Schools");
        // newText -> "Please visit W3Schools!"
    - text:
        - |
          The replace() method does not change the string 
          it is called on.
        - |
          The replace() method returns a new string.
        - |
          The replace() method replaces only the first match
        - |
          If you want to replace all matches, 
          use a regular expression ...
          with the /g flag set.
      example: |
        let text = "Please visit Microsoft and Microsoft!";
        let newText = text.replace(/Microsoft/g, "W3Schools");
        // newText -> "Please visit W3Schools and W3Schools!"
    - text:
        - |
          By default, 
          the replace() method is case sensitive.
        - |
          To replace case insensitive, 
          use a regular expression with an /i flag (insensitive)
      example: |
          let text = "Please visit Microsoft!";
          let newText = text.replace(/MICROSOFT/i, "W3Schools");
          // newText -> "Please visit W3Schools!"

- header: "replaceAll()"
  portions:
    - text:
        - | 
          In 2021, 
          JavaScript introduced the string method 
          replaceAll()
      example: |
          let text = "I love cats. Cats are very easy to love. \
          Cats are very popular."
          text = text.replaceAll("Cats","Dogs");
          text = text.replaceAll("cats","dogs");
          // text -> I love dogs. Dogs are very easy to love. Dogs are very popular.
    - text:
        - | 
          The replaceAll() method allows you to specify a 
          regular expression instead of a string 
          to be replaced.
        - | 
          If the parameter is a regular expression, 
          the global flag (g) must be set, 
          otherwise a TypeError is thrown.
      example: |
          let text = "I love cats. Cats are very easy to love. Cats are very popular";
          text = text.replaceAll(/Cats/g,"Dogs");
          text = text.replaceAll(/cats/g,"dogs");
          // text -> I love dogs. Dogs are very easy to love. Dogs are very popular

- header: "Converting to Upper and Lower Case"
  portions:
    - text:
        - | 
          A string is converted to upper case with toUpperCase()
      example: |
          let text1 = "Hello World!";
          let text2 = text1.toUpperCase();  
          // text2 -> "HELLO WORLD!"
    - text:
        - | 
          A string is converted to lower case with toLowerCase()
      example: |
          let text1 = "Hello World!";
          let text2 = text1.toLowerCase();
          // text2 -> "hello world!"

- header: "trim(), trimStart(), trimEnd()"
  portions:
    - text:
        - | 
          The trim() method removes whitespace from both sides of a string
      example: |
          let text1 = "      Hello World!      ";
          let text2 = text1.trim();
          // text2 -> "Hello World!"
    - text:
        - | 
          ECMAScript 2019 added the String method trimStart() to JavaScript.
        - |
          The trimStart() method works like trim(), 
          but removes whitespace only from the start of a string.
      example: |
          let text1 = "      Hello World!      ";
          let text2 = text1.trimStart();
          // text2 -> "Hello World!      "
    - text:
        - | 
          ECMAScript 2019 added the String method trimEnd() to JavaScript.
        - |
          The trimEnd() method works like trim(), 
          but removes whitespace only from the end of a string.
      example: |
          let text1 = "      Hello World!      ";
          let text2 = text1.trimEnd();
          // text2 -> "      Hello World!"               